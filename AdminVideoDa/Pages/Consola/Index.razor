@page "/consola/index"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService

<MudText style="margin:10px;" Typo="Typo.h2" Class="ml">Consolas</MudText>

<MudTable style="margin:10px;" Items="@consolas" Dense="true" Hover="true" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="goAdd" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Search" Edge="Edge.Start" OnClick="Search" Style="margin-top:5px" />
        <MudTextField @bind-Value="searchText" Placeholder="Search" Adornment="Adornment.Start" @onkeydown="HandleKeyPress"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Nombre</MudTh>
        <MudTh>Serie</MudTh>
        <MudTh>Fabricante</MudTh>
        <MudTh>Precio</MudTh>
        <MudTh>AñodeLanzamiento</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
        <MudTd DataLabel="Serie">@context.Serie</MudTd>
        <MudTd DataLabel="Fabricante">@context.Fabricante</MudTd>
        <MudTd DataLabel="Precio">@context.Precio</MudTd>
        <MudTd DataLabel="AñodeLanzamiento">@context.AñodeLanzamiento</MudTd>
        <MudTd>
            <MudButton Link="@($"/consola/editar/{context.Id}")" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Tertiary"
                       Class="text-center">Editar</MudButton>
            <MudButton Link="@($"/consola/eliminar/{context.Id}")" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Warning"
                       Class="text-center">Eliminar</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Consola> consolas = new List<Consola>();
    private string searchText = "";

    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getAll();
    }

    private async Task getAll()
    {
        var httpResponse = await httpClient.GetStringAsync("consola");
        consolas = JsonSerializer.Deserialize<IEnumerable<Consola>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private void goAdd()
    {
        NavigationManager.NavigateTo("consola/agregar");
    }
    private async Task Search()
    {
        var SearchCriteria = new
        {
            Nombre = searchText,
            Descripcion = searchText,
            Serie = searchText,
            Fabricante = searchText,
            Precio = searchText,
            AñodeLanzamiento = searchText,
        };
        var httpResponse = await httpClient.PostAsJsonAsync("consola/buscar", SearchCriteria);
        string respString = await httpResponse.Content.ReadAsStringAsync();
        var allConsoles = JsonSerializer.Deserialize<IEnumerable<Consola>>(respString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        var matchingConsoles = allConsoles
             .Where(c => c.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase) || c.Descripcion.Contains(searchText, StringComparison.OrdinalIgnoreCase) || c.Serie.Contains(searchText, StringComparison.OrdinalIgnoreCase) || c.Precio.Contains(searchText, StringComparison.OrdinalIgnoreCase)
             || c.Fabricante.Contains(searchText, StringComparison.OrdinalIgnoreCase) || c.AñodeLanzamiento.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .Take(5)
            .ToList();

        if (matchingConsoles.Any())
        {
            consolas = matchingConsoles;
        }
        else
        {

            consolas = new List<Consola>();

        }

    }
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }
}
