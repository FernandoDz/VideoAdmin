@page "/rol/index"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService

<MudText style="margin:10px;" Typo="Typo.h2" Class="ml">Roles</MudText>

<MudTable style="margin:10px;" Items="@roles" Dense="true" Hover="true" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="goAdd" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Search" Edge="Edge.Start" OnClick="Search" Style="margin-top:5px" />
        <MudTextField @bind-Value="searchText" Placeholder="Search" Adornment="Adornment.Start" @onkeydown="HandleKeyPress"></MudTextField>

    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Nombre</MudTh>
        <MudTh>Acciones</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
        <MudTd>
            <MudButton Link="@($"/rol/editar/{context.Id}")" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Tertiary"
                       Class="text-center">Editar</MudButton>
            <MudButton Link="@($"/rol/eliminar/{context.Id}")" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Warning"
                       Class="text-center">Eliminar</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Rol> roles = new List<Rol>();
    private string searchText = "";
    private Rol rol = new Rol();

    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getAll();
    }

    private async Task getAll()
    {
        var httpResponse = await httpClient.GetStringAsync("rol");
        roles = JsonSerializer.Deserialize<IEnumerable<Rol>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private void goAdd()
    {
        NavigationManager.NavigateTo("rol/agregar");
    }

    private async Task Search()
    {
        var httpResponse = await httpClient.PostAsJsonAsync("rol/buscar", rol);
        string respString = await httpResponse.Content.ReadAsStringAsync();
        var allRoles = JsonSerializer.Deserialize<IEnumerable<Rol>>(respString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

       var matchingRoles = allRoles
    .Where(c => c.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase))
    .Take(5)
    .ToList();
        if (matchingRoles.Any())
        {
            roles = matchingRoles;

        }
        else
        {
            roles = new List<Rol>();
        }

    }
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }
}